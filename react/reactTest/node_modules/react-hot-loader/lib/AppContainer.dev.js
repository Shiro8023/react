'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _updateCounter = require('./updateCounter');

var _reactHydrate = require('./reconciler/reactHydrate');

var _reactHydrate2 = _interopRequireDefault(_reactHydrate);

var _hotReplacementRender = require('./reconciler/hotReplacementRender');

var _hotReplacementRender2 = _interopRequireDefault(_hotReplacementRender);

require('./patch.dev');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class AppContainer extends _react2.default.Component {
  constructor(props) {
    super(props);

    if (typeof __REACT_HOT_LOADER__ !== 'undefined') {
      __REACT_HOT_LOADER__.warnings = props.warnings;
    }

    this.state = {
      error: null,
      generation: 0
    };
  }

  componentDidMount() {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
      console.error('React Hot Loader: It appears that "react-hot-loader/patch" ' + 'did not run immediately before the app started. Make sure that it ' + 'runs before any other code. For example, if you use Webpack, ' + 'you can add "react-hot-loader/patch" as the very first item to the ' + '"entry" array in its config. Alternatively, you can add ' + 'require("react-hot-loader/patch") as the very first line ' + 'in the application code, before any other imports.');
    }
  }

  componentWillReceiveProps() {
    if (this.state.generation !== (0, _updateCounter.getGeneration)()) {
      // Hot reload is happening.

      this.setState({
        error: null,
        generation: (0, _updateCounter.getGeneration)()
      });

      // perform sandboxed render to find similarities between new and old code
      (0, _hotReplacementRender2.default)(this, (0, _reactHydrate2.default)(this));
    }
  }

  shouldComponentUpdate(prevProps, prevState) {
    // Don't update the component if the state had an error and still has one.
    // This allows to break an infinite loop of error -> render -> error -> render
    // https://github.com/gaearon/react-hot-loader/issues/696
    if (prevState.error && this.state.error) {
      return false;
    }

    return true;
  }

  componentDidCatch(error) {
    this.setState({
      error
    });
  }

  render() {
    const error = this.state.error;


    if (this.props.errorReporter && error) {
      console.error(error);
      return _react2.default.createElement(this.props.errorReporter, { error: error });
    } else if (error) {
      console.error(error);
    }

    return _react2.default.Children.only(this.props.children);
  }
}

AppContainer.propTypes = {
  children(props) {
    if (_react2.default.Children.count(props.children) !== 1) {
      return new Error('Invalid prop "children" supplied to AppContainer. ' + 'Expected a single React element with your appâ€™s root component, e.g. <App />.');
    }

    return undefined;
  },
  errorReporter: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  warnings: _propTypes2.default.bool
};

AppContainer.defaultProps = {
  warnings: true
};

exports.default = AppContainer;